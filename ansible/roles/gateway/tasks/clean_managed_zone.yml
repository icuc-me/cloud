---

- assert:
    that:
        # "wan" or "lan"
        - '_loop_zone_name.key | default("", True) | trim | length'
        # actual zone name, e.g. "wan" -> "external"
        - '_loop_zone_name.value | default("", True) | trim | length'

- name: 'Desired {{ _loop_zone_name.key | capitalize }} zone {{ _loop_zone_name.value }} name, services, ports, and rich-rules are buffered'
  set_fact:
      _ztype: '{{ _loop_zone_name.key }}'
      _zname: '{{ _loop_zone_name.value }}'
      _zservices: '{{ hostvars[inventory_hostname]["gateway_" + _loop_zone_name.key + "_services"] }}'
      _zports: '{{ hostvars[inventory_hostname]["gateway_" + _loop_zone_name.key + "_ports"] }}'
      _zrr: '{{ hostvars[inventory_hostname]["gateway_" + _loop_zone_name.key + "_rr"] }}'

# SERVICES

- name: '{{ _ztype | capitalize }} zone {{ _zname }} services are retrieved'
  command: >-
      firewall-cmd --zone={{ _zname }} \
      {% if not gateway_settings_permanent %}--permanent{% endif %} \
      --list-services
  changed_when: False
  register: _list_services

- name: Parse output into set excluding desired items
  set_fact:
      # An empty stdout will result in a single item list, containing a single empty string
      _list_services: '{{ _list_services.stdout.split(" ") | default([], True) | difference(_zservices) }}'

- debug:
    msg: 'Removing service {{ item }}'
  when: item | trim | length  # Prevent looping when no services defined
  with_items: '{{ _list_services }}'

- name: 'Unmanaged {{ _ztype }} zone services are removed'
  firewalld:
      zone: '{{ _zname }}'
      service: '{{ item }}'
      permanent: '{{ gateway_settings_permanent }}'
      state: 'disabled'
      immediate: True
  when: item | trim | length
  notify: Firewalld reloaded when permanent
  # To get the difference of 2 lists (items in 1 that donâ€™t exist in 2)
  with_items: '{{ _list_services }}'

# PORTS

- name: '{{ _ztype | capitalize }} zone {{ _zname }} ports are retrieved'
  command: >-
      firewall-cmd --zone={{ _zname }} \
      {% if not gateway_settings_permanent %}--permanent{% endif %} \
      --list-ports
  changed_when: False
  register: _list_ports

- name: Parse output into set excluding desired items
  set_fact:
      _list_ports: '{{ _list_ports.stdout.split(" ") | default([], True) | difference(_zports) }}'

- debug:
    msg: 'Removing port {{ item }}'
  when: item | trim | length
  with_items: '{{ _list_ports }}'

- name: 'Unmanaged {{ _ztype }} zone ports are removed'
  firewalld:
      zone: '{{ _zname }}'
      port: '{{ item }}'
      permanent: '{{ gateway_settings_permanent }}'
      state: 'disabled'
      immediate: True
  when: item | trim | length
  notify: Firewalld reloaded when permanent
  with_items: '{{ _list_ports }}'

# Rich Rules

- name: '{{ _ztype | capitalize }} zone {{ _zname }} rich-rules are retrieved'
  command: >-
      firewall-cmd --zone={{ _zname }} \
      {% if not gateway_settings_permanent %}--permanent{% endif %} \
      --list-rich-rules
  changed_when: False
  register: _list_rr

- name: Parse output into set excluding desired items
  set_fact:
      _list_rr: '{{ _list_rr.stdout_lines | default([], True) | difference(_zrr) }}'

- debug:
    msg: 'Removing rr {{ item }}'
  when: item | trim | length
  with_items: '{{ _list_rr }}'

- name: 'Unmanaged {{ _ztype }} zone rich-rules are removed'
  firewalld:
      zone: '{{ _zname }}'
      rich_rule: '{{ item }}'
      permanent: '{{ gateway_settings_permanent }}'
      state: 'disabled'
      immediate: True
  when: item | trim | length
  notify: Firewalld reloaded when permanent
  with_items: '{{ _list_rr }}'
